1.Вступ до ІТ. Компанії та проєкти. Поняття тестування. Основні стандарти ISTQB


1)Вибери предмет з твого оточення (наприклад, чашку, ноутбук, машину, футболку тощо) 
Чашка 500 мл
Етап верифікації:
Призначення чашки: для води (холодної, гарячої), для чаю, для глінтвейну.
Матеріал: скло
Об’єм: 500 мл
Тип чашки: з подвійним дном
Колір: прозора, без малюнку
Дизайн: однотонна

Етап валідації:
1)чи точно чашка вміщує 500 мл, чи можна налити туди 500 мл води?
2)чи стійка чашка на поверхні:
- якщо вона порожня?
- якщо наповнити її рідиною?
3)теплопровідність: чи можемо ми тримати чашку якщо наповнили її гарячою рідиною? чи нагрівається скло?
4)чи зручно пити з цієї чашки?
5) яка форма ручки - чи зручно тримати чашку?
6)дизайн - чи дійсно вона без жодного малюнку? чи дійсно вона прозора? якщо налити туди рідину, чи видно якого кольору рідина?


2) Своїми словами поясни визначення валідації та верифікації.
Верифікація - перевіряємо чи коректно ПЗ працює відповідно до вимог, чи відповідає специфікації.  Проводимо review без запуску ПЗ.
Валідація - підтвердження відповідності ПЗ потребам кінцевого користувача (замовника).  Проводимо review запустивши ПЗ[a].



























2-й рівень
Склади порівняльну таблицю різних видів компаній. Вкажи плюси та мінуси кожної з них


	Переваги
	Недоліки
	Product
	1.Розуміння продукту та відчуття залученості.
2. Дисципліна і відповідальність. Якщо ти недопрацьовуєш, це відразу відбивається на результаті всієї команди.
3. Можливість навчання, менеджери зацікавлені у розвитку працівника.




	1.Неможливість змінити проект у межах компанії. [b]
2.Відносно повільне технічне зростання.
3.Однотипна робота,є вірогідність протягом багатьох років займатися вдосконаленням одного продукту цієї компанії.
	Outsource
	1.Можливість переходити з проекту на проект
2.Більше швидке кар'єрне зростання
3.Постійна комунікація із замовником.
4. Багато проектів, де використовуються різні технології , різні мови програмування , є можливість отримати досвід відразу в декількох напрямках.
	1.Є вірогідність застрягти на не цікавому довгостроковому проекті.
2.Можливе звільнення у разі закриття проекту.
3. Немає почуття , що ти належиш до якоїсь компанії і розділяєш її корпоративні цінності.
4.Надмірна кількість узгоджень і жорсткі дедлайни.
	





3. Наведи приклади невдалої валідації або верифікації продукту, з якими довелося зіткнутися в житті. 
Під час покупки на сайті , при заповненні форми з ім’ям, я коректно вказала своє ім’я, але отримала відповідь - the name is not valid. У цьому кейсі можна говорити про помилку валідації.


3-й рівень
2. Поясни важливість 2-3 принципів тестування на власний вибір. Наведи приклади з власного досвіду.


Раннє тестування заощаджує час і гроші
Медичний додаток який має доступ до мед документації пацієнта надіслав нотифікацію до провайдера (лікаря), що у пацієнта на даний час пульс 125 ударів за хвилину. Хоча насправді у документі було вказано доза препарату 125 мг. Тобто неправильно спрацювала екстракція з документу - що призвело до некоректної генерації нотифікації. Лікарю довелось звернути увагу на документ та пацієнта ( витрата часу). Команда яка займається екстрагуванням інформації з документу має фіксити цей баг.


Вичерпне тестування неможливе
Після релізу ПЗ всеодно зявляються різні дрібні баги, ми не можемо передбачити усі сценарії і протестувати усе.










2. SDLC та STLC. Методології розробки ПЗ[c].


Перший рівень
Склади порівняльну таблицю найбільш поширених методологій:




Методологія
	Сильні сторони
	Слабкі сторони
	Для якої галузі є доцільною
	1.Waterfall
	1)Повне документування кожного етапу;


2) Чітке планування термінів та витрат;


3) Прозорість процесів для замовника;




	1)Необхідність затвердження повного обсягу вимог до системи ще на першому етапі; 
Також поки ми не завершимо один з етапів життєвого циклу, ми не можемо перейти до наступного, що потребує великої кількості часу.


2)У разі потреби внесення змін вимог пізніше – повернення до першої стадії та переробка наново всієї виконаної роботи;


3) Збільшення витрат коштів та часу у разі потреби зміни вимог.

4)Ця система працює добре тільки тоді, коли вимоги стабільні і не змінюються в ході розробки.


	Для великих проектів з чітко визначеними вимогами - наприклад для космічної галузі, для медицини.
	2. V-модель
	1)Інтегрує процес тестування протягом усього процесу розробки, реалізація принципу раннього тестування. V-модель включає тестові рівні, пов’язані з кожною фазою розробки.


2)В період проектування компонентів системи вивчаються способи тестування компонентів та їх взаємодії, створюються сценарії тестування, утиліти, що допомагають в тестуванні, інструкції, скрипти тощо.

3)містить чітко фіксовані вимоги, вартість і час.
	1)У цій моделі, також як і в каскадній моделі, небажано, щоб вимоги змінювалися під час розробки.


2)У моделі не передбачено внесення динамічних змін на різних етапах життєвого циклу.


3)Модель не передбачає роботу з паралельними подіями.
	Також використовується для великих проектів з чітко визначеними вимогами- оборонна сфера, медицина.
	3.Ітераційна модель










	1) раннє створення працюючого ПЗ;
2) гнучкість – готовність до зміни вимог на будь-якому етапі розробки;
3) кожна ітерація – маленький етап, для якого тестування та аналіз ризиків забезпечити простіше, ніж для всього життєвого циклу продукту.


	1)потребує багато часу, тому можна не вкластися у визначений бюджет і дедлайн;

2)можуть виникнути проблеми з реалізацією загальної архітектури системи, оскільки не всі вимоги відомі до початку проектування.


3)Має більший обсяг витрат на організацію процесу,
ніж каскадна модель, проте вартість виправлення помилки в залежності від тривалості проекту не
така висока.




	Для різних проектів:
-для великих проектів
-для стартапів
-для проектів коли відомі ключові вимоги, або коли вимоги можуть змінюватись у процесі розробки.
	



Другий рівень


На твою думку, чому з’явився Agile-маніфест?
Які проблеми він мав вирішити і чи це вдалося?


Agile — це методологія гнучкої розробки, яка сьогодні популярна в ІТ і дозволяє клієнтам швидше отримувати якісне програмне забезпечення.


На мою думку Agile придумали для того щоб встигати за змінами на ринку. У таких моделей як Waterfall та V-модель підхід до проектів досить повільний, не гнучкий та дорогий. Також у Waterfall проектах не заохочуються зміни, а зворотний зв’язок ігнорується до повного закінчення проекту.  
За Agile усе відбувається значно швидше: представлення прототипу, тестування, доставка самого програмного продукту на ринок з адаптацією до його потреб.


Аgile – гнучкий підхід. Згідно з даною концепцією, працівники мають право на помилки, допущені при плануванні й оцінюванні проєкту. Адже все передбачити неможливо. Тут реально передбачити потенційні зміни чи доповнення, у подальшому вбудувавши їх у робочий процес. Наприклад, багато цінних ідей виникає під час реалізації проекту.
Завдяки розбивці проєкту на малі задачі, легко визначити найважливіші.
Пріоритетність – основа методу Аgile, що дозволяє фокусувати увагу на спринті, його меті чи визначеному результаті. Це дає високу ймовірність досягнення поставлених бізнес-цілей.


Основними перевагами методології є:
-гнучкість і здатність підлаштовуватися під потреби замовника й ринку;
-отримання на виході досконалого продукту, який проходить перевірки вкінці кожного спринту; 
-чудова адаптивність.


Які проблеми він мав вирішити?
-Можливість вносити зміни на різних етапах розробки. Можлива зміна вимог вітається навіть у пізніх стадіях розробки.
-Активна співпраця із замовником, його участь у процесі розробки. Співпраця із замовником важливіша за погодження умов контракту
-Швидка адаптація ПЗ до умов ринку. Agile-команди чуйно реагують на зміни та успішно адаптуються до нових умов та викликів.
На мою думку вирішити ці проблеми вдалося.


Третій рівень
Ти – засновник/ця стартапу і плануєш випустити на ринок мобільний застосунок для обміну світлинами котиків.
Яку методологію ти обереш для процесу розробки і чому? Відповідь текстово обґрунтуй. 


Для свого застосунку я оберу ітераційну модель.
Так як це невеликий стартапам я поки не знаю до кінця, яким має бути цей продукт;
Також  я зацікавлена у розвитку цього продукту і можливо у майбутньому буде потреба додати новий функціонал, або з'являться нові ідеї у процесі розробки.
Завдяки ітераційному підходу команда зможе виконували роботу частинами, тестували готові функції та якщо буде у тому потреба швидко вдосконалювали продукт на основі відгуків користувачів.




3. Робота з вимогами. Аналіз та складання вимог
Перший рівень
Наведи короткі приклади вимог (3-5) до будь-якого предмета з твого оточення, які б відповідали кожному з таких критеріїв оцінки якості:
* Атомарність
* Несуперечність
* Тестованість
* Відстежуваність.


Безпровідні навушники. Вимоги:
1) підключаються до смартфона по Bluetooth,
2) навушники мають бути з мікрофоном
3) частотний діапазон – від 20 Гц до 20 кГц 
4) має бути режим шумоізоляції




Другий рівень
2. На твою думку, яка з технік тестування вимог гарантує максимально можливу якість фінального результату. Відповідь обґрунтуй (3-5 речень).


На мою думку гарантувати максимально можливу якість фінального результату може така техніка тестування - як написання тест-кейсів та чек-листів.
Оскільки тут ми формуємо вимоги у форматі «вхід — вихід», «подія — наслідок», «умова — відповідь». Щось подається на вхід до системи, з системою щось відбувається, і вона має дати щось на виході.
Ця техніка  дуже добре дозволяє перевіряти вимоги на повноту, зрозумілість та однозначність. Коли ми пишемо тест-кейси, то реально починаємо розуміти, що ж у цих вимогах написано, які є можливі випадки, що могли б нам пізніше зіпсувати проект.


Третій рівень 
2. Ти – засновник/ця стартапу, який планує випустити на ринок мобільний застосунок для обміну світлинами котиків.
Склади функціональні  (5-7 од.) та нефункціональні (5-7 од.) вимоги до застосунку.
Функціональні вимоги:
1)Застосунок має надавати можливість користувачу реєструватися в системі;
2)Застосунок має надавати можливість авторизуватися у сисему клієнту, який попередньо пройшов реєстрацію.
3)Застосунок має надсилати сповіщення про запит доступу до папки з фотографіями на пристрої.
4)Застосунок має надавати можливість користувачу відправляти повідомлення у вигляді тексту та фотографії;
5)Застосунок має надавати можливість користувачу створювати групові чати;
6)Застосунок має надавати можливість користувачу очищувати свої чати
 - Застосунок має надавати можливість користувачу очистити історію чату
 - Застосунок має надавати можливість користувачу видалити чат 
7)Застосунок має надавати можливість користувачу працювати з відправленими повідомленнями
- Застосунок має надавати можливість користувачу видаляти повідомлення
- Застосунок має надавати можливість користувачу редагувати власні повідомлення
8)Застосунок має надавати можливість користувачу редагувати особисті дані 
9)Застосунок має надавати можливість користувачу виходити із облікового запису.


Нефункціональні вимоги:
1)Застосунок має працювати на таких браузерах, як: Google Chrome, Opera, Mozilla Firefox.
2)Застосунок повинен працювати на пристроях з операційною системою Windows, Android, iOS.[d]
































































4. Тестова документація


Перший рівень
1. Склади порівняльну таблицю трьох видів тестової документації:




Назва тестової документації
	Переваги
	Недоліки
	Тест-кейс
	-Для тестування складного функціоналу краще використовувати тест-кейси.
-Тест-кейси можна довірити виконувати новачкам та джунам.
	- Заповнення вимагає довгої монотонної роботи
-Витратне за часом редагування.
-Складно підтримувати. Якщо у функціоналі щось змінюється, то потрібно переписувати всі степи тест-кейсу.
	Чек-ліст
	-Простота створення та швидкі у написанні
-Простота візуалізації
-Для тестування простих функцій краще використовувати чек-листи.
	-Недостатня для деяких цілей деталізація - при тестуванні складного функціоналу наприклад.
-Можливість різної інтерпретації - QA інженери з різним досвідом можуть виконувати однакові завдання, використовуючи різні підходи.
-Не підходять для новачків і джунів - якщо досвідчений співробітник без проблем може зрозуміти, що слід перевірити, [e]проконтролювати та врахувати за допомогою списків, бо він має достатні знання про проект, з новачком або джуніором є ймовірність, що такого рівня документації буде замало.
	





























 2. Склади чек-ліст для перевірки головної сторінки свого улюбленого інтернет-магазину (rozetka.ua, hotline.ua, silpo.ua тощо). Темплейт для чек-ліста можна взяти в кроці три теорії.[f]


https://www.zara.com/pl/




Головна сторінка 
ZARA

	Case
	Expected result
	Result
	Header section
	

	

	

	1. Menu button
	Перевірка кнопки burger menu
	При натисканні кнопки burger menu з’являється side menu
	passed
	2. Search button
	Перевірка кнопки search 
	При натисканні на кнопку search - переходимо  на search page
	passed
	3. Login button
	Перевірка кнопки login
	При натисканні кнопки login - переходимо на login page.
	passed
	4. Help button
	Перевірка кнопки help
	При натисканні кнопки help - переходимо на help page.
	passed
	5. Shopping cart button
	Перевірка кнопки Shopping cart 
	При натисканні кнопки Shopping cart  - переходимо на Shopping cart  page.
	passed
	Main section
	

	

	

	1. One scroll page
	Перевірка функціональності one page scroll
	При скролі вверх або вниз відбувається перехід на нову секцію.
	passed
	2. Left slider button
	Перевірка кнопки left slider button
	При натисканні кнопки left slider button змінюється картинка та з’являється right side menu.
	passed
	Right side menu
	

	

	

	1. Beauty button
	Перевірка кнопки beautty button 
	При натисканні на кнопку beautty button відбувається перехід на нову секцію
	passed
	2. Join life button
	Перевірка кнопки Join life button
	При натисканні на кнопку Join life button відбувається перехід на нову секцію.
	passed
	



2. Склади 5 позитивних і 5 негативних тест-кейсів для перевірки основної функціональності твого улюбленого інтернет-магазину
1. Позитивні тест-кейси
  



  
[g]














2. Негативні тест-кейси


  











Третій рівень
2. Ти – засновник/ця стартапу, який планує випустити на ринок мобільний застосунок для обміну світлинами котиків для iOS та Android пристроїв. Стартап має команду з 3 розробників (back-end, iOS та Android). Вимоги та сценарії використання надаєш ти як головний стейкхолдер.
Завдання: Створи тест-план, який дозволить випустити продукт належної якості.




ТЕСТ ПЛАН

1 ВСТУП 
1.1 Основна інформація
1.2 Об'єкт тестування
2. Цілі тестування
3. Область тестування застосунку 
4. Підхід до тестування 
5. Критерії входу та виходу
5.1 Критерії входу 
5.2 Критерії виходу
6. Стратегія тестування
6.1 Обов'язки учасників тестової групи
6.2  Визначення серйозності та пріоритету помилок.
6.2.1.Ступінь серйозності помилок 
6.2.2 Пріоритет дефекту
6.3 Повідомлення про помилки
7. Ресурси
7.1. Інструменти
7.2 Список браузерів
7.3 Список девайсів
8. Критерії якості
9. Ризики процесу тестування
10. Результати




Проект “Mобільний застосунок для обміну світлинами котиків”
Історія редагування




Версія
	Опис
	Автор
	Дата
	1.1
	Test plan was created
	Liubov Koliada
	26.01.2023
	

	

	

	

	



1. Вступ
1.1 Основна інформація
Документ описує методи та підходи до тестування, які будуть використовуватися
тестувальниками відділу тестування для тестування мобільного застосунок для обміну світлинами котиків.
План тестування може використовуватися тестувальниками, менеджерами та
розробниками.


1.2 Об'єкт тестування - це діяльність, спрямована на перевірку роботи функцій мобільного застосунок для обміну світлинами котиків в операційних системах Android та iOS.


2. Цілі
Тест-план проекту має такі цілі:
-Визначити наявну інформацію про проект і програмні компоненти, що підлягають тестуванню.
-Описати стратегії тестування, які будуть використовуватися.
-Визначити необхідні ресурси для проведення робіт з тестування.
-Навести результати тестування.
-Результати буде надіслано замовнику у вигляді звітів. Усі знайдені помилки будуть
відстежуватимуться за допомогою баг-трекінгової системи.


3.Область тестування застосунку


До обсягу робіт із тестування мобільного застосунку входить тестування таких компонентів і функцій:
1. Створення облікового запису за допомогою електронної пошти.
2. Створення облікового запису за допомогою соціальних мереж.
3.Створення облікового запису за допомогою номеру телефону.
4. Вхід у систему як користувач, як адміністратор.
5. Відновлення пароля.
6. Завантаження фотографій зі смартфону до застосунку.
7. Надсилання фотографій іншим залогіненим до застосунку користувачам.
8. Профіль.
8. Застосунок працює на пристроях з операційною системою Android та iOS




4. Підхід до тестування 
 Основні типи тестування, які будуть виконані:
- Функціональне тестування.
- Тестування користувацького інтерфейсу
- Нефункціональне (Застосунок повинен працювати на пристроях з операційною системою Android та iOS).


5.Критерії входу та виходу
5.1 Критерії входу
* Налаштоване тестове середовище.
* Налаштований тестовий юзер.
* Вся необхідна документація та інформація про дизайн і вимоги повинна бути доступною, що дозволить тестувальникам працювати з системою та оцінити її правильну поведінку.


5.2 Критерії виходу
* Усі тест-кейси пройдено.
* Немає багів, що блокують.
* Усі баги з високим пріоритетом виправлені.
* Дотримання графіку - коли графік виконано.


6.Стратегія тестування:
6.1 Обов'язки учасників тестової групи
* Менеджер проекту
-Управління процесом тестування.
-Надання всіх необхідних ресурсів для проведення випробувань.
-Виступає основним контактним обличчям для команди розробників та QA
-Відповідає за графік проекту та загальний успіх проекту.




* Керівник відділу тестування (QA Lead)
Участь у створенні/оновленні плану проекту.
Збір і вивчення вимог.
Перевірка документації.
Планування робіт з тестування.
Координація з QA аналітиками/інженерами щодо будь-яких питань/проблем, що виникають під час тестування.
Контроль за проведенням випробувань, щоб роботи виконувалися відповідно до плану.
Звіти про хід виконання, кількість і серйозність виявлених помилок.


* Тестувальник
Процес контролю якості, реєстрація виявлених помилок у затвердженій системі відстеження помилок.
Розуміння вимог, підготування та виконання тест-кейсів, чек-листів, тест-сценаріїв.
Повідомлення про дефекти та їх відстеження, повторне тестування.
Координація з QA Lead для будь-яких питань або проблем що виникли під час підготовки/виконання тесту/обробки дефектів.




6.2  Визначення серйозності та пріоритету помилки.
6.2.1.Ступінь серйозності помилок 
* S1 Блокуючий (Blocker)
* S2 Критичний (Critical)
* S3 Значний (Major)
* S4 Незначний (Minor)
* S5 Тривіальний (Trivial)


6.2.2 Пріоритет дефекту:
* P1 Високий (High)
* P2 Середній (Medium)
* P3 Низький (Low)


6.3 Повідомлення про помилки
            Кожен баг-репорт містить таку інформацію про дефект:
* Заголовок (Summary) - Короткий опис проблеми, що явно вказує на причину та тип помилкової ситуації.
* Проєкт (Project) - Назва тестованого проєкту
* Компонент програми (Component) - Назва частини або функції продукту, що тестується
* Номер версії (Version) - Версія, у якій було знайдено помилку
* Критичність (Severity)
* Пріоритет (Priority) - Пріоритет дефекту:
* Статус (Status)- Статус багу. Залежить від використовуваної процедури та життєвого циклу багу
* Автор (Author) - Автор баг репорту
*  Призначений для (Assigned To)- Ім'я співробітника, призначеного на розв'язання проблеми
* Опис (Description)- Інформація про оточення, в якому було знайдено баг: операційна система, сервіс пак, ім'я та версія браузера, версія бібліотеки тощо
* Кроки, якими можна легко відтворити ситуацію, що призвела до помилки
* Фактичний результат
* Очікуваний результат
* Прикріплений файл (Attachment)- Файл із логами, відео, скриншот або будь-який інший документ, який може допомогти прояснити причину помилки чи вказати на спосіб відтворення проблеми.




7. Ресурси
7.1. Інструменти
Будуть використані наступні інструменти:


Найменування процесу
	Інструмент
	Баг трекінгова система
	Jira
	Тест кейси
	Testrail
	Захоплення зображень
	Monosnap
	

7.2 Список браузерів: Chrome (latest), Firefox (latest), Safari (latest)

7.3 Список девайсів: iPhone, Android 




8. Критерії якості
Продукт має працювати відповідно до вимог і технічного завдання.
Продукт не повинен містити критичних і блокувальних багів в остаточній версії
проекту.


9. Ризики процесу тестування
Такі проблеми можуть вплинути на результати тестування:
* Зміни у вимогах до програмного забезпечення, які не були попередньо обговорені з командою тестування.
* Затримки у виправленні помилок.


10. Результати
План тестування.
Звіти про помилки та звіти про хід тестування.[h]
















5. Рівні та види тестування


Перший рівень
1. Склади порівняльну таблицю функціонального, нефункціонального і пов’язаного зі змінами видів тестування. 






	Функціональне
	Нефункціональне
	Пов’язане зі змінами
	Що перевіряється?
	Це тестування функціональності програмного забезпечення.
	Це тестування продуктивності функціональних можливостей програмного забезпечення.
	Після проведення необхідних змін, таких як виправлення бага, програмне забезпечення повинне бути перетестоване для підтвердження того факту, що проблема була дійсно вирішена. 
	Коли застосовується?
	Функціональні тести базуються на функціях і особливостях, а також взаємодії з іншими системами, і можуть бути представлені на всіх рівнях тестування: компонентному або модульному (Component / Unit testing), інтеграційному (Integration testing), системному (System testing) і приймальному (Acceptance testing ).
	Застосовується для перевірки продуктивності.
1. Види тестування продуктивності:
1)тестування навантаження (Performance and Load Testing),
2) стресове тестування (Stress Testing), 3)тестування стабільності або надійності (Stability / Reliability Testing), 4)об’ємне тестування (Volume Testing).

Також застосовується для:
2.Тестування установки (Installation testing)
3.Тестування зручності користування (Usability Testing)
4.Тестування на відмову і відновлення (Failover and Recovery Testing)
5. Конфігураційного тестування (Configuration Testing)
	Для підтвердження працездатності програми або правильності здійсненого виправлення дефекту.


1)Регресійне тестування (Regression Testing)


2)Димове тестування (Smoke Testing)


3)Санітарне тестування або перевірка узгодженості / справності (Sanity Testing)


4)Тестування збірки (Build Verification Test)


	







2. Поясни, в чому різниця між регресією та ретестингом (5 речень).


1. Re-testing застосовується для перевірки якості будь-якої конкретної функції, компонента чи модуля програми, якщо в цих частинах були виявлені баги. Тобто для перевірки конкретної помилки чи проблеми, на яку був створений bug report.


2. Мета регресійного тестування полягає в тому, щоб перевірити, чи нові зміни коду не впливають негативно на існуючі розроблені та протестовані функції програми. Та зменшення кількості багів у системі на момент релізу. Під час виконання регресійного тестування виконуються як функціональні, так і нефункціональні тести.
 
Regression testing проводиться:
* коли до наявної програми додається нова функція;
* при зміні середовища тестування;
* або коли внутрішній код перенесено на іншу платформу;
* якщо на етапі тестування було виявлено багато критичних помилок;
* основні проблеми з продуктивністю та збої у роботі програми усунуті розробниками;
* додані виправлення, які зачіпають більшу частину функціональності системи;
* інтерфейс програми було змінено для покращення взаємодії з користувачем.








Другий рівень

2. Як ти вважаєш, чи можливе для продукту проведення тільки функціонального тестування, без перевірки нефункціональних вимог?
Я вважаю що як функціональне, так і нефункціональне тестування потрібно щоб  ПЗ відповідало всім вимогам користувача. Функціональні тести перевіряють, чи відповідає ПЗ визначеним вимогам, а нефункціональне тестування з'ясовує, наскільки добре працює система загалом.
Функціональні тести проводяться, щоб виявити та усунути помилки, що суперечать бізнес-вимогам. А нефункціональні тести відповідають за досвід користувача та поведінку ПЗ, а не за «пошук багів».


На рівні юніт - тестування функціональне не проводиться
На інтеграційному рівні - теж функціональне
На системному - функц + нефункціон
Асептенс - функц+нефункціональне.







3. Як ти розумієш необхідність проведення smoke (димового) тестування? Чи завжди воно є доречним?
Димові тести здійснюються в тих випадках, коли тестувальники отримують нову версію (білд) програми на тестування. На цьому етапі необхідно переконатися, що надзвичайно важливі функції працюють згідно з очікуваннями. 
Концепція цього виду тестування полягає в тому, щоб виявити серйозні проблеми якомога раніше і відхилити цей білд або повернути його на доопрацювання на ранньому етапі тестування. Це необхідно, щоб не поглиблюватися в складні тести і не витрачати час на явно неякісне програмне забезпечення.


Якщо це виправлений код, то ми так само  проходимось по високо пріоритетним тест-кейсам, щоб преконатись що основні фунції ПЗ відпрацьовують коректно.








Третій рівень


2. Ти – засновник/ця стартапу і плануєш випустити на ринок мобільний застосунок для обміну світлинами котиків для iOS та Android пристроїв.
Користувачі можуть завантажувати фотографії котиків. Але не можуть завантажувати фотографії інших тварин/людей/об’єктів. Користувачі можуть додавати друзів, ставити “вподобайки”, залишати коментарі.
Завдння: Напиши 5 функціональних тест-кейсів, які перевіряли б роботу застосунку.
  



  







  
[i]
  

  





3. Напиши, які нефункціональні вимоги ти хотів/ла б  застосувати для продукту твого стартапу. 
Опиши перевірки, які б їх перевіряли (3-5 прикладів).
1. Застосунок повинен працювати на пристроях з операційною системою Android та  iOS.
[j]-Спробувати скачати та відкрити на пристроях з операційною системою Android та  iOS.

2.  Застосунок має працювати  на таких браузерах, як: Google Chrome, Opera, Mozilla Firefox, Safari.[k]
Спробувати запустити застосунок на таких браузерах, як: Google Chrome, Opera, Mozilla Firefox, Safari.


   3. Застосунок має завантажувати фотографію з котиком з галереї  смартфону за 2 с.
Спробувати завантажити фотографію котика в застосунок з галереї смартфона.


      4. Юзер має можливість загрузити у застосунок одночасно 10 фотографій з галереї смартфона.
[l]Спробувати загрузити одночасно 10 фотографій в застосунок з галереї смартфона.






6. Системи контролю проєктів та тестів. TestRail та Azure DevOps




Низькорівневі тест-кейси - деталізовані, де ми описуємо всі степи та експектед резалт.
Високорівневі - коли не прописуємо всі степи і очікувані результати(протестувати таку- то функцію, без степів і експектед резалт).


Перший рівень 


1. На твою думку, в чому полягає найбільша користь використання систем тест-менеджменту? Які їх особливості дозволяють цього досягнути? Відповідь текстово обґрунтуй.
 За допомогою систем тест-менеджменту з'являється можливість консолідувати та структурувати процес тестування. Немає потреби встановлювати кілька додатків, які призначені для управління тільки одним процесом або його частиною.
Деякі системи тест-менеджменту  мають інструменти  для чіткого відстеження ключових показників, що дає змогу легко отримувати необхідну інформацію про стадії процесу тестування та якість продукту, що тестується.


Після старту тестування проекту члени команди можуть взаємодіяти через одну із систем управління тестування шляхом створення тест-кейсів, чек-листів, призначаючи відповідальних за проходження цих тест-кейсів, що спрощує та покращує якість взаємодії осіб, які проводять тестування в рамках конкретного проекту. При створенні або проходженні тестів і чек-листів користувачі можуть отримати доступ до різних функцій систем управління тестуванням, які автоматизують цю діяльність і позитивно впливають на швидкість і якість її виконання.




Другий рівень


2. Перенеси тест-кейси, які ти створював/ла на попередніх заняттях, в тест-менеджмент систему (TestRail чи Azure DevOps).
3. Об’єднай їх в тестовий цикл та пройди його.
https://samilyk.testrail.io/index.php?/suites/view/9&group_by=cases:section_id&group_order=asc&display_deleted_cases=0














Третій рівень
2. Продовжуємо розвивати стартап для застосунку, який дозволяє обмінюватися фотографіями котиків. Вирішили запровадити систему менеджменту проєкту і тестів. 
Твоя задача – зробити порівняльний аналіз кількох систем на вибір (наприклад, Jira, Azure DevOps, Asana, Trello тощо):
         * що вони вміють
         * які є обмеження
         * скільки це буде приблизно коштувати вашому проєкту






	Jira
	Trello
	що вони вміють?
	Jira – система відстеження помилок (баг-трекер), призначена для організації спілкування з учасниками команди, а також для керування проєктами.


Jira дозволяє створити власний проєкт, налаштувати його та відстежувати весь процес виконання завдань до самого завершення. За допомогою налаштування адміністратор може визначати доступні дії для різних користувачів. 


Широкий набір функцій.
 -Можжна адаптувати Jira до роботи з проектами практично будь-якої складності.
-Великий інтеграційний потенціал. Jira приємна до інтеграції з різними сервісами: Github, Salesforce, Outlook, Slack, Gmail, Teams.
-Можливість розширення функціоналу, використовуючи різні плагіні. Найбільш популярні - Tempo, Script Runner, EazyBI, Big Picture, Structure.
-Можливість роботи за методологіями Scrum або Kanban.


	Фундамент Trello – канбан дошки. Робочий процес спрямовано перетягування завдань між стовпцями, щоб показати, якому етапі перебуває кожна їх. Менеджер може налаштовувати стовпці та картки завдань та прикріплювати до них виконавців. Користувачі можуть ставити позначки певного кольору для кожної картки, щоб спростити навігацію.
	які є обмеження?
	Тривалий процес налаштування під конкретні робочі процеси та складний інтерфейс часто вважаються мінусами.
	-Невелике охоплення. Чим більше завдань, тим громіздкішою стає дошка. Відповідно працювати з нею складніше.
Тому Trello зовсім не підходить для великих проектів із сотнями завдань. Він стає незручним, дуже плутає як менеджера, так  і виконавців. Більше того, при переміщенні карток можна помилитися, і тоді в роботі почнеться повний хаос.
-Платний експорт. У будь-якому проекті виникає необхідність вивантаження файлів на інші послуги або безпосередньо на сайт. На безкоштовному плані для цього потрібно завантажувати їх на комп'ютер, а потім відправляти на файлообмінник або, наприклад, надсилати поштою. Для прямого експорту знадобиться платний план.


	вартість 
	Від $10 на місяць.
	Практично весь необхідний функціонал доступний у безкоштовній версії.[m]
	



7. Що таке “Баг”. Робота з баг-трекінговими системами на прикладі Jira


Баг - це не співпадіння очікуваного і фактичного результату.
Помилка та баг - це не одне й те саме. Помилка приводить до виникнення багів.


Перший рівень 
В баг-трекінговій системі (Jira) опиши 3 баги, які знайдеш на сайті


  





Другий рівень
2. Наведи власні приклади багів, які можуть мати такі комбінації::
         * Severity - Critical/Priority - Low
         * Severity - Minor / Priority - Highest
(на кожен варіант вкажи по 2 баги)
         1. Severity - Critical/Priority - Low

Після оновлення модуля кожен 100 користувач не можу залогінитись у систему.
Після оновлення модуля кожна 100 нотифікація яка надсилається до юзера, не змінює свій статус from unread to read.

         2. Severity - Minor / Priority - Highest
Header logo - сірого кольору , а має бути зеленого.
Button “ADD to shoping bag” білого кольору в активному стані, а має бути червона.


Третій рівень
2. Продовжуємо розвивати стартап для застосунку, який дозволяє обмінюватися фотографіями котиків. 
Команда тестувальників скаржилась, що без баг-трекінгової системи все було дуже погано. Тому ви вирішили запровадити систему відстежування багів Jira. 
Ти як керівник/ця маєш створити життєвий цикл багу. 
            * Які статуси туди будуть входити? 
            * В якій послідовності? 
            * Чому саме такі? 


Життєвий цикл багу
1.Тестувальник знаходить дефект.
2. Тестувальник оформлює звіт про дефект у баг-трекінговій системі (статус «Новий» (New)) і призначає на розробника (статус «Призначено» (Assigned)).
3. Розробник перевіряє відтворюваність дефекту і привласнює йому один з наступних статусів: 
            *  «Дублікат» (Duplicate) – схожий дефект вже є в баг-трекінговій системі;
            * «Відхилено» (Rejected) – дефект не є вагомим;
            * «Відстрочено» (Deferred) – виправлення дефекту можна перенести в наступні версії програмного продукту;
            * «Не баг» (Not a bug) – до функціоналу програмного товару не буде внесено жодних змін;
            * «Відкрито» (Open) – розробник взяв дефект в роботу;
            * «Виправлено» (Fixed) – розробник вніс зміни в код і перевірив їх.
            4. Тестувальник проводить повторне тестування дефекту (статус «Повторне тестування» (Re-testing)).
            5. Якщо дефект не відтворюється, тестувальник закриває його (статуси «Перевірено» (Verified), «Закрито» (Closed)).
            6. Якщо дефект відтворюється, тестувальник повертає його розробнику на виправлення (статуси «перевідкрив» (Reopened), «Призначено» (Assigned)) і такий дефект проходить цей життєвий цикл ще раз.





















8. Огляд технік тест-дизайну. White Box техніки


Must have рівень: 


            1. Зроби порівняння статичних та динамічних технік тестування. Наведи переваги та можливі обмеження при використанні кожної з них. 




	Статистична техніка тестування
	Динамічна техніка тестування
	Основна інформація
	Не вимагає запускати програму чи додаток, дає змогу знайти найбільш очевидні помилки ще на ранніх етапах створення продукту та включає рев’ю (перевірку робочих продуктів, як-от документація, користувацькі історії, діаграми, інструкції та інші документи, що використовуються під час розробки ПЗ) і статичний аналіз (автоматизоване тестування коду та документації для пошуку очевидних помилок та хиб).


	Тип тестування, який передбачає запуск програмного коду. Тобто поведінка програми аналізується під час її роботи. Для виконання динамічного тестування необхідно, щоб програмний код, який тестується, був написаний, скомпільований та запущений. 


	Перевага №1
	-пошук та усунення дефектів вважається більш ефективним до проведення динамічного тестування;


	-Це ретельне дослідження, яке розглядає всю функціональність програми, тому якість відповідає найвищим стандартам.


	Перевага №2
	-ідентифікація дефектів, які складно виявити при динамічному тестуванні;


	-Процес динамічного тестування добре налагоджений, додаток тестується з точки зору користувача, що підвищує якість ПЗ.


	Перевага №3 
	-попередження дефектів дизайну або кодування шляхом виявлення невідповідностей, неоднозначностей, суперечностей, пропусків та неточностей;


	- Виявлення складних помилок, які могли вислизнути на етапі код рев'ю.


	Перевага №4
	-підвищення якості розробки, включно з покращенням дизайну та підтримкою коду;


	- Динамічне тестування може бути автоматизовано за допомогою спеціальних інструментів.


	Перевага №5
	-зниження загальної вартості на підтримку ПЗ впродовж усього терміну служби через раннє виявлення дефектів;
-скорочення витрат і часу на розробку та тестування;
	

	Обмеження №1
	-Процес статичного тестування може займати багато часу, так як в основному він виконується вручну.


	-Оскільки динамічне тестування являє собою складний процес, воно займає багато часу.


	Обмеження №2
	-Перешкоджає виявленню вразливостей, представлених в середовищі виконання.


	-Висока вартість проведення тестування.


	Обмеження №3
	-Не дозволяє виявити дефекти в самій логіці програмного забезпечення
	-Динамічне тестування зазвичай виконується після завершення кодування, і знайдені баги виявляються пізніше в життєвому циклі розробки.
	Висновок
	Не потребує виконання програмного коду
Орієнтоване на запобігання дефектів
Виконується на ранніх етапах розробки програмного забезпечення
Менша вартість виправлення багів
Забезпечує більш ширше охоплення,аніж динамічне, за коротший проміжок часу.
Включає в себе різні методи оцінки, наскрізний перегляд, рев’ю і багато іншого.
Мета – запобігання дефектів програмного забезпечення
Комплексне тестування коду, яке допомагає знайти більше дефектів у системі.
Виконується перед деплоєм коду


	Включає в себе виконання програмного коду
Забезпечує функціональність продукту
Виконується на більш пізніх етапах розробки програмного забезпечення
Велика вартість виправлення багів
Покриває обмежену область коду, потребує меншого охоплення
Включає в себе як функціональне так і нефункціональне тестування
Мета – пошук і усунення багів
Виконується після деплоя коду


	









Середній рівень:


            1. Виконай завдання попереднього рівня.
            2. Наступне твердження стосується покриття рішень:
Коли код має одну ‘IF” умову, не має циклів (LOOP)  або перемикачів (CASE), будь-який тест, який ми виконаємо, дасть результат 50% покриття рішень (decision coverage). 


Яке твердження є коректним?
            1. Коректно. Будь-який тест кейс надає 100% покриття тверджень, таким чином покриває 50% рішень.
            2. Коректно. Результат будь-якого тесту умови IF буде або правдими, або ні.
            3. Некоректно. Один тест може гарантувати 25% перевірки рішень в цьому випадку.
            4. Некоректно, бо занадто загальне твердження. Ми не можемо знати, чи є воно коректним, бо це залежить від тестованого ПЗ.


            3. Є псевдокод: Switch PC on -> Start MS Word -> IF MS Word starts THEN -> Write a poem -> Close MS Word. 


Скільки тест кейсів знадобиться, щоб перевірити його функціонал? 
            5. 1 – для покриття операторів, 2 – для покриття рішень
            6. 1 – для покриття операторів, 1 – для покриття рішень
            7.             8. 2 – для покриття операторів, 2 – для покриття рішень
            9. 2 – для покриття операторів, 1 – для покриття рішень


            4. Скільки потрібно тестів для перевірки тверджень коду: 
     
            10. 2
            11. 1[n]
            12. 3
            13. 4
	



















Програма максимум:


            1. Виконай завдання двох попередніх рівнів.
            2. Продовжуємо розвивати стартап для застосунку, який дозволяє обмінюватися фотографіями котиків.


Є алгоритм: 
Запитай, якого улюбленця має користувач. 
Якщо користувач відповість, що має кота, то запитай, яка порода його улюбленця: «короткошерста чи довгошерста?»
Якщо клієнт відповість «довгошерста», то запитай: «ви бажаєте отримати контакти найближчого грумера?»
Якщо клієнт відповість «так», то скажи: «Надайте адресу найближчої котячої перукарні»
Інакше
Скажи: «Запропонуй магазин з товарами по догляду за шерстю»
Закінчити
Інакше
Скажи «Запропонуй обрати магазин із зоотоварами»
Закінчити
Якщо клієнт не має кота
Скажи “Коли вирішите завести улюбленця – приходьте”
Закінчити


Завдання:
            1. Намалюй схему алгоритму (в інструменті на вибір, наприклад, у вбудованому Google Docs редакторі, figjam чи miro)
            2. Який потрібен мінімальний набір тест-кейсів, щоб переконатися, що всі запитання були поставлені, всі комбінації були пройдені та всі відповіді були отримані?
  

Щоб переконатися, що всі запитання були поставлені, всі комбінації були пройдені та всі відповіді були отримані нам потрібно створити 4 тест-кейси.




9. Практика техніки тест-дизайну Black Box. Частина 1: аналіз класів еквівалентності, граничних значень і попарне тестування
Must have рівень:


1. Система контролю за швидкістю руху має наступні характеристики:
            * при швидкості 50 і менше км/год – система не реагує
            * при швидкості більше ніж 50, але менше ніж 55 км/год – система видає попередження
            * при швидкості більше ніж 55, але менше ніж 60 км/год – система випише штраф
            * при швидкості більше, ніж 60 км/год – водій отримає штраф та штрафний бал у водійське посвідчення


Швидкість в системі вимірюється цілими значеннями. Який з наборів тестових даних можна використати для перевірки всіх граничних значень еквівалентних класів? 
            1. 0, 49, 50, 54, 59, 60
            2. 50, 55, 60
            3. 49, 50, 54, 55, 60, 62
            4. 50, 51, 55, 56, 60, 61


2. Фітнес застосунок рахує кількість кроків і надсилає користувачам повідомлення, щоб заохотити їх рухатися. В залежності від кількості кроків фідбек буде таким: 
            * до 1000 кроків включно – “Житель дивана”
            * від 1000 до 2000 кроків включно – “Лежибока”
            * від 2000 до 4000 кроків включно – “Рухай тілом!”
            * від 4000 до 6000 кроків включно – “Непогано!”
            * більше 6000 – “Молодець, так тримати!”


Який набір тестових даних надасть найкраще покриття класів еквівалентності?
            1. 0, 1000, 2000, 3000, 4000
            2. 1000, 2001, 4000, 4001, 6000
            3. 123, 2345, 3456, 4567, 5678
            4. 666, 999, 2222, 5555, 6666[o]




Середній рівень:
1. Виконай завдання попереднього рівня.
2. Пристрій, що вимірює час та інтенсивність сонячного світла, яке отримала рослина, рахує комбінацію параметрів – час на сонці (менше ніж 3 години, від 3 до 6 годин та понад 6 годин) та інтенсивність світла (дуже низька, низька, середня, висока). 


Є наступний набір тестів: 




	Години
	Інтенсивність
	Індекс опромінення
	Тест 1
	1,5
	дуже низька
	10
	Тест 2
	7
	середня
	60
	Тест 3
	0,5
	дуже низька
	10
	

Яка мінімальна кількість додаткових тест-кейсів потрібна, щоб упевнитися, що всі валідні класи еквівалентності покриті?
            1. 1
            2. 2[p]
            3. 3
            4. 4


2. Застосунок для відтворення відео має вимоги. Застосунок буде працювати на пристроях з такою розподільчою здатністю: 
            1. 640x480
            2. 1280x720
            3. 1600x1200
            4. 1920x1080


Який тест-кейс є результатом застосування техніки розподілення на класи еквівалентності? Обгрунтуй свою відповідь.
            1. Перевірити, що застосунок відтворює відео на дисплеї 1920х1080 (1 тест-кейс)
            2. Перевірити, що застосунок відтворює відео на дисплеї 640х480 та 1920х1080 (2 тест-кейси)
            3. Перевірити, що застосунок відтворює відео на дисплеях всіх розмірів, вказаних у вимогах (4 тест-кейси)
            4. Перевірити, що застосунок відтворює відео на дисплеї будь-якого розміру, що вказані у вимогах (1 тест-кейс)

Згідно вимог ми можемо виділити 4 класи еквівалентності, тому щоб перевірити кожен з класів еквівалентності нам потрібно створити 4 тест-кейси, щоб переконатись що застосунок відтворює відео на дисплеях усіх розмірів, як вказано у вимогах.


Програма максимум:


1. Виконай завдання двох попередніх рівнів.
2. Продовжуємо розвивати стартап для застосунку, який дозволяє обмінюватися фотографіями котиків.
Напиши вимоги для застосунку, які б регламентували мінімальний та максимальний розмір фотографії, що користувачі можуть завантажити в систему. А також такі параметри: мінімальна довжина коментаря під фотографіями, максимальна довжина коментаря під фотографіями (чим більше параметрів ти придумаєш, тим краще).


Напиши тест-кейси, які за допомогою розділення на класи еквівалентності та аналіз граничних значень, дозволять перевірити ці вимоги.


Вимоги:
               1. Розмір фотографії, що користувачі можуть завантажити в систему 
-мінімальний - 180 x 180 px
-максимальний - 1080 x 1920 px


                  2. Мінімальна довжина коментаря під фотографіями : 2 символи
                  3. максимальна довжина коментаря під фотографіями: 150 символів.




Тест кейси:
-Перевірити, що до застосунку можемо завантажити фотографію 180 x 180 px
-Перевірити, що до застосунку НЕ можемо завантажити фотографію 120 x 120 px
-Перевірити, що до застосунку можемо завантажити фотографію 1080 x 1920 px
-Перевірити, що до застосунку НЕ можемо завантажити фотографію 2400 x 2400 px
-Перевірити, що до застосунку можемо завантажити фотографію 1080 x 1350 px


-Перевірити, що у застосунку ми НЕ можемо лишити коментарій з 1 символом
-Перевірити, що у застосунку ми НЕ можемо лишити коментарій з 151 символами
-Перевірити, що у застосунку ми можемо лишити коментарій з 2 символами
-Перевірити, що у застосунку ми можемо лишити коментарій з 3 символами
-Перевірити, що у застосунку ми можемо лишити коментарій з 149 символами
-Перевірити, що у застосунку ми можемо лишити коментарій з 150 символами
[q]







10. Практика техніки тест-дизайну Black-Box. Частина 2: таблиці ухвалення рішень, тестування переходу станів, тестування юз-кейсів


Must have рівень:


1. Яке твердження щодо діаграми переходу станів і таблиці з тест-кейсами є вірним?
  



Тест-кейс
	1
	2
	3
	4
	5
	Стан початку
	S1 
	S2 
	S2


	 S3 
	S3


	Живлення
	Power On
	Power Off
	RC On
	RC off
	Power Off
	Стан завершення
	S2
	S1
	S3
	S2
	S1
	

                  1. Дані тест-кейси покривають валідні і невалідні переходи на діаграмі.
                  2. Дані тест-кейси показують всі можливі валідні переходи на діаграмі.
                  3. Дані тест-кейси покривають деякі валідні переходи на діаграмі.
                  4. Дані тест-кейси покривають пари переходів на діаграмі.




2. Співробітникам компанії виплачують бонуси за умови, що вони пропрацювати більше ніж рік та виконали заздалегідь поставлені цілі. 


Ці умови можна подати у вигляді таблиці рішень:








Тест
	

	Т1
	Т2
	Т3 
	Т4
	Умова 1: 
	Стаж більше року?
	Так
	Ні
	Ні
	Так
	Умова 2
	Ціль поставлена?
	Ні
	Ні
	Так
	Так
	Умова 3
	Ціль досягнута?
	Ні
	Ні
	Так
	Так
	Дія
	Виплата бонуса
	Ні
	Ні
	Ні
	Так
	

Який сценарій, що є ймовірним в реальному житті, пропущений в таблиці?
                  1. Умова 1 = ТАК, Умова 2 = НІ, Умова 3 = ТАК, Дія = НІ
                  2. Умова 1 = ТАК, Умова 2 = ТАК, Умова 3 = НІ, Дія = ТАК
                  3. Умова 1 = НІ, Умова 2 = НІ, Умова 3 = ТАК, Дія = НІ
                  4. Умова 1 = НІ, Умова 2 = ТАК, Умова 3 = НІ, Дія = НІ[r]


Середній рівень:


1. Виконай завдання попереднього рівня.


2. Склади діаграму станів і переходів для тестування відеогри:
Після запуску гри ти опиняєшся в «Замку загадок», у кімнаті з двома коридорами — направо і наліво.
Якщо піти направо — потрапляєш до дракона. Дракон загадує тобі загадку. Якщо відповідь правильна — виходиш із замку та виграєш. Якщо неправильна — дракон загадує ще одну загадку. Якщо ти вдруге відповідаєш неправильно — дракон тебе з'їдає і ти програєш.
Якщо піти наліво — потрапиш до відьми. Відьма загадує загадку, якщо відповідь правильна — виходиш із замку і виграєш. Якщо відповідь неправильна — відьма переносить тебе до дракона.


3. Скільки тест-кейсів, відповідно до складеної діаграми, буде достатньо, щоб протестувати цю гру?


  




Відповідно до складеної діаграми, щоб протестувати цю гру, необхідно 5 тест-кейсів.


Програма максимум:


                  1. Виконай завдання двох попередніх рівнів.
                  2. Продовжуємо розвивати стартап для застосунку, який дозволяє обмінюватися фотографіями котиків.


а. Напиши 5 use-кейсів для типової поведінки користувача твого застосунку. 
б. Намалюй схему переходу станів на основі написаних користувацьких сценаріїв та склади таблицю рішень для одного з варіантів.

1.
Use Case ID
	1.00
	Use Case ID Name
	Add photo to the app photo gallery
	Use Case Description
	User can add a new photo to the app photo gallery
	Actor
	System user
	Precondition
	User is logged in into app and home page is opened
	Postcondition
	The photo is added to the app photo gallery
	Basic Flow


	1. User selecting photo from the smartphone that is going to be added to the app photo gallery
2. System validates selected photo for the supported formats (jpg, png) and size (to 50 MB including)
3. System uploads the photo to the photo gallery


	Extensions
	2a. App is not in supported formats (GIF, RAW , PSD and other)
System displays message "Please select photo in jpg or png format"
2b. Photo  size is more than 50 MB
System displays message "Please select photo less than 50 MB"
	

2.




Use Case ID
	2.00
	Use Case ID Name
	Add comment to photo in the app
	Use Case Description
	User can add comment to photo in the app
	Actor
	System user
	Precondition
	User is logged in into system and home page is opened
	Postcondition
	The comment  is added to photo
	Basic Flow


	1. User selecting randon friend’s photo , press the button “Add comment”, comment input is open.
2. User write a comment
3. System validates comment for minimum (2 symbols) and maximum (150 symbols) length of comment.
4. The button “Publish” become active.
5.User press the button “Publish”. The comment displayed in the comment section.


	Extensions
	3а. Comment length less than 2 symbols
System displays message "Please write a comment with more that 2 symbols"
3в. Comment length is more than 150 characters
System displays message "Please write a comment with less that 150 symbols"
	



  









Conditions
	Case 1
	Case 2
	Case 3
	Case 4
	Case 5
	Format
	jpg
	png
	not jpg, not png
	jpg
	png
	size
	50 MB
	50 MB
	50MB
	51MB
	51MB
	Output
	Photo is added
	Photo is added
	Photo is not  added. 
Wrong format
	Photo is not  added. 
Size should be less than 50 MB
	Photo is not  added. 
Size should be less than 50 MB[s]
	







































11. Естимація. Практика створення тестової документації


Перший рівень — відпрацюй навички на базовому рівні.
1. Створи високорівневий тест-кейс для перевірки функціоналу мобільного застосунка (наприклад, Дія або МоноБанк).
TC - 1 Test the "Funds transfer" function of Monobank mobile app
2. Створи 3 низькорівневі тест-кейси на основі високорівневого.


  

  



  



Другий рівень — детальніше заглибся в практику.
1. Виконай завдання попереднього рівня.
2. Проестимуй, скільки часу знадобиться для виконання тест-кейсів з попереднього завдання. 
3. Для оцінки використай як мінімум 2 техніки (наприклад, WBS та трьохточкову естимацію).
Story-points Estimating
1st test-case Ability to transfer funds to the correctly entered card number - 2 story points
2nd test-case Ability to transfer funds to the incorrectly entered card number - 1 story point
3rd test-case Ability to transfer funds using a mobile phone number - 2 story points


3-Points Estimating
Triangular Distribution: E = (o + m + p ) / 3
where E is Estimate; o = optimistic estimate; p = pessimistic estimate; m = most likely estimate


For 2nd test-case:
o = 4 hours , m = 8 hours , p = 16 hours
Triangular Distribution:
E = (4 + 8 + 16 ) / 3
E = 28 / 3
E = 9.3 hours




For 1st and 3rd test-cases:
o = 8 hours , m = 16 hours , p = 24 hours
Triangular Distribution:
E = (8 + 16 + 24 ) / 3
E = 48 / 3
E = 16 hours










Третій рівень — різнобічно опануй тематику уроку.
1. Виконай завдання двох попередніх рівнів.
2. Продовжуємо розвивати стартап для застосунка, який дозволяє обмінюватися фотографіями котиків. Команда тестувальників стартапу зростає разом із продуктом. Ви замислилися над створенням тестової стратегії.
Спробуй створити документ, який би відповідав потребам вашої команди                     
[Catphoto app]
Test Strategy


Revision History
Date
	Version
	Author
	Description
	13/02/2023
	1.1
	Liubov Koliada
	

	

	

	

	

	

	

	

	

	

	

	

	

	

________________


Table of Contents
1. Scope        3
2. Test Approach        4
3. Test Environment        5
4. Testing Tools        6
5. Release Control        7
6. Risk Analysis        8
7. Review and Approvals        9


                  1. Scope
It defines parameters like
                  * Who will review the document?
                  * Who will approve this document?
                  * Testing activities carried out with timelines
This is the Test Strategy for "Catphoto app" . This document will be completed and used by the project test team to guide how testing will be managed for this project. The test effort will be prioritized and executed based on the project priorities as defined in the Project Plan and Requirements Specification. This is a living document that may be refined as the project progresses. The QA Manager, Test Team Lead, Product Manager, Project Manager, and Development Manager will review and approve the final version of the Test Strategy document. 


                  2. Test Approach
It defines
                  * Process of testing
                  * Testing levels
                  * Roles and responsibilities of each team member
                  * Types of Testing ( Load testing, Security testing, Performance testing etc.)
                  * Testing approach & automation tool if applicable
                  * Adding new defects, re-testing, Defect triage, Regression Testing and test sign off
1. Test Levels
1.2. Unit
Unit testing is testing performed to determine that individual program modules perform per the design specifications.
- Owners
Corresponding Lead Developers:
- Implementation Approach
At the discretion of the Developer
- Tools/Techniques Manual tests.


1.2 System
System testing is the process of testing an integrated system to verify that it meets specified requirements. This
testing will determine if the results generated by information systems and their components are accurate and that the
system performs according to specifications.
- Owners
Test Team consisting of QA Lead and Software Quality Engineers


- Implementation Approach
The objective of system testing is to verify the correctness of the newly designed items and their interaction with the existing functions. Testing will focus on the functionality of the "Catphoto app". Testing will be accomplished through an organized testing process that will have repeatable tests. This process will be accomplished by use of the tests created and designed to match the requirements being developed for the "Catphoto app".
Testing and development will be executed in parallel, based on phased implementations,
wherever possible. Tests will be structured to give a full range of coverage to the converted functions in both a Positive and Negative scenarios, simulating what a potentially unfamiliar user might do during use. Positive test cases will reflect
that the application functions as expected and described in the Requirements Specification and the Project Plan.
Negative test cases are tests that exercise the limits and boundaries outside the expected designs. The results of this testing will give us some idea as to the stability for the application and its components. 
1.3 Integration Test
Integration testing confirms that each piece of the application interacts as designed and that all functionality is working. Integration testing includes interactions between all layers of an application, including interfaces to other applications, as a complete end-to-end test of the functionality. 
1.4 Acceptance Test
 It will verify that the system meets user requirements as specified. 


- Tools/Techniques
Manual tests




2.Test Types
The following Test Types should be performed:
Functional testing:
Testing based on an analysis of the specification of the functionality of a component or solution (testing “what” the solution does)


Non-functional testing
Testing of the attributes of a component or system that do not relate to functionality (testing “how well” the solution works). Non-functional testing includes, but not limited to: Deployment, Performance, Load, Stress, Security, Privacy, Usability, Maintainability, Reliability, Portability, Installability testing etc.


Regression Testing:
Testing of a previously tested solution following modification to ensure that defects have not been occurred or are uncovered in unchanged areas of the solution. It is performed when the software or its environment is changed.
The regression test consists of previously defined and used test cases.
The size of the regression test set is based on the product risk of the solution.


Confirmation testing
Testing that runs test cases that failed the last time they were run, in order to verify the success of corrective actions.


Smoke testing:
Testing of a subset of all defined or planned test cases that cover the main functionality of a component or system in order to ensure that the most crucial functions of a solution work (there is no need to test in detail).








                  3. Test Environment
                  * Define number of requirement and setup required for each environment
                  * Define backup of test data and restore strategy


1)User acceptance testing (UAT) environment- identical to the Production environment - test users
2) Production environment - test users




________________


                     4. Testing Tools
                     * Automation and Test management tools needed for test execution
                     * Figure out number of open-source as well as commercial tools required, and determine how many users are supported on it and plan accordingly


TestRail
Jira


________________


                     5. Release Control
                     * Release management plan with appropriate version history that will make sure test execution for all modification in that release


________________


                     6. Risk Analysis
                     * List all risks that you can estimate
                     * Give a clear plan to mitigate the risks also a contingency plan




                        1
                
	Delays in delivering completed Test Items from Development would         impact test timescales and final Release quality
                
	Product Management and Development to advise of any delays and adjust Release Scope of Resources to allow the test activities to be performed.
                
	                        High
                
	                        2
                
	Delays in the turn around time for fixing critical bugs, which would require re-testing, could have an impact on the project dates.
                
	Strong management of bug resolution would be required from Development to ensure bugs are fixed and available for re-testing in the scheduled time.
                
	        
High
                
	                        3                
	Features of Test Items will not be testable.
                
	The Test Team will record untested features and request the PM to assess business risk in support of the release of untested features.
	Low
                        


                                
	                        4
                
	Unexpected dependencies between Test Items and service components         are encountered that require revision of Test Scenarios and related Test Cases.
                
	Information about dependencies is updated and communicated         promptly to allow timely revision of Test Scenarios and Test Cases
                
	        Low
                
	







________________


                     7. Review and Approvals
                     * All these activities are reviewed and sign off by the business team, project management, development team, etc.
                     * Summary of review changes should be traced at the beginning of the document along with approved date, name, and comment
[t]


Approval By


	Approval 
	Test Manager
                
	                        
                        
                
	The Test Department Manager
                
	                        
                        
                
	Product Owner
                
	                        
                        
                
	Development Manager
                
	                        
                        
                
	Project Manager
                
	                        
                        
                
	





















12. Основи web (HTML, CSS). Xpath і СSS-селектори. Кодування символів


Перший рівень — відпрацюй навички на базовому рівні.
1. Протестуй сайт https://kasta.ua/  знайшовши 3 баги; запиши їх в Google docs. 
1. Search field validation 
Description
The query is not sent after 2 letters were typed.
The query is sent only after 3 letters were typed.


Steps to reproduce:
1.Open website
2.Open network tabe
3.Type one letter in the search input
4.Click on searcn icon
5.Tooltip with help message showns “Введіть хоча б 2 букви”
6.Type 2 letters
7.Click search icon
8.No toltips shown
9.Query is not sent 


Actual Result:
The query is not sent after 2 letters were typed.
The query is sent only after 3 letters were typed.

Expected Result:
The query should be sent after 2 letters were typed

Environment
Production
  

  





1. The size value doesn’t fit container
Steps to reproduce:
1.Open website
2.Click burger menu “Каталог”
3.Click on the filter option “Дітям”
4.Choose filter option “Штани”
5.Choose the first item
7.Scrool down to the section “Рекомендуємо”
8.Pay attention size values don’t fit container


Actual Result:
Size value doesn’t fit container

Expected Result:
The size value should fit container


Environment
Production
  

1. When hover 3 dots (last item of size labels), the last size become active

Steps to reproduce:
1.Open website
2.Click burger menu “Каталог”
3.Click on the filter option “Дітям”
4.Choose filter option “Штани”
5.Hover on the first item
6.Hover on the 3 dots (last item of size labels)
7.Pay attention when hover 3 dots (last item of size labels), the last size become active (green color)


Actual Result:
When hover 3 dots (last item of size labels), the last size become active (green color)

Expected Result:
When hover 3 dots (last item of size labels), it should become active (green color)



Environment
Production
  











2. Створи єдиний HTML-документ з підключенням в ньому стилів трьома різними способами:
                     * В середині специфічного тегу (inline)
                     * В розділі “HEAD”
                     * У зовнішньому .css файлі








Другий рівень — детальніше заглибся в практику. 
1. Виконай завдання попереднього рівня. 
2. За допомогою Developer Tools визнач кодування символів, використаних на таких вебсторінках:
                     * https://beetroot.academy
  

                     * https://microseniors76.com/
  

                     * https://www.tennis-warehouse.com/
  

                     * https://www.fidelity.com/
  

Відповіді  з визначенням кодування кожної сторінки запиши в той самий файл Google Docs.












Третій рівень — різнобічно опануй тематику уроку.
1. Виконай завдання двох попередніх рівнів.
2. На сайті https://www.amazon.com/ знайди Xpath таких елементів:
                     * Logo сайту;
  

                     * Кошик;
  

                     * Language switcher;
  

                     * Поле пошуку;
  

                     * Розділ меню Gift Cards;
  

                     * Розділ меню Today’s Deals;
  

                     * Розділ меню Registry;
  

                     * Розділ меню Sell;
  

                     * Розділ меню Accounts & Lists;
  

                     * Розділ меню Returns & Orders.
  

Відповіді зі скріншотами запиши в той самий файл Google Docs.[u]
























13.Тестування інтерфейсу користувача (GUI). Тестування вебзастосунків


Перший рівень — відпрацюй навички на базовому рівні.
Протестуй UI/UX сайту Оксфорд Медикал. В Google docs створи 5 багів з дотриманням усіх вимог до оформлення багу. 
Відповіді до завдань запиши у файл Google Docs. Додай посилання на нього в LMS.
1.Text overlaps search icon


Description
Long text in search input overlaps search icon


Steps to reproduce:
1.Open website
2.Click on search icon
3.Write long text in search input  
4.Pay attention that text in search input overlaps search icon




Actual Result:
Long text in search input overlaps search icon

Expected Result:
Long text in search input doesn’t  overlap search icon


Environment
Production
  





2. Wrong translation Kiev - Kyiv in location selector in English version
Description
Wrong translation Kiev - Kyiv in location selector  in English version 
Steps to reproduce:
1.Open website
2. Click on language selector, choose ENG 
3. Click on location selector
4. Pay attention that Kyiv written with mistake in location selector - Kiev
Actual Result:
Kyiv written with mistake in location selector - Kiev
Expected Result:
Should be Kyiv in location selector

Environment
Production
  
  





3. Picture not fitted container
Description
Picture not fitted container on page “МЕДІА ЦЕНТР”
Steps to reproduce:
1.Open website
2.Go to page  “МЕДІА ЦЕНТР”
3. Pay attention that pictures not fitted container
Actual Result:
Picture not fitted container on page “МЕДІА ЦЕНТР”
Expected Result:
Picture fitted container on page “МЕДІА ЦЕНТР”
Environment
Production
  

  





4. Wrong drobdown behavior
Description
When double click on select “Усі”, it becomes smaller
Steps to reproduce:
1.Open website
2.Go to page  “Лікарі”
3.Double click on select “Усі”
3. Pay attention that select “Усі”  becomes smaller
Actual Result:
Select “Усі” becomes smaller when double click on it
Expected Result:
Select “Усі” should not become smaller when double click on it
Environment
Production


  





5.The query is sent after each typed letter
Description
The query is sent after each typed letter

Steps to reproduce:
1.Open website
2.Open network tabe
3.Type different letters in the search input
4. Pay attention that query is sent after each typed letter


Actual Result:
The query is sent after each typed letter


Expected Result:
The query is not sent after each typed letter


Environment
Production
  





Другий рівень — детальніше заглибся в практику. 
1. Виконай завдання попереднього рівня.
2. Проведи кросбраузерне тестування знайдених раніше багів у трьох різних браузерах.
3. Додай результати до зафіксованих раніше багів.
 
Третій рівень — різнобічно опануй тематику уроку.
1. Виконай завдання двох попередніх рівнів.
2. За допомогою Developer Tools зафіксуй використаний шрифт, його розмір, колір та колір бекграунду наступних елементів сайту Оксфорд Медикал:
                     * номер телефону у хедері
  

колір бекграунду
  



                     * ім’я асистента при виклику чата допомоги
  

                     * кнопка “інші міста” у футері сайту
  

                     * Placeholder “ім’я” у формі “ЗАПИСАТИСЯ НА ПРИЙОМ”
  



Результати додай у документ, створений раніше для попередніх рівнів домашньої роботи. Документ додай в LMS.[v]










14. Основи тестування мобільних додатків
Перший рівень — відпрацюй навички на базовому рівні.
1. Протестуй роботу сайту  “Київська міська лікарня ветеринарної медицини” на мобільному пристрої. 
2. Заведи 5 відповідних баг репортів у файл Google Docs. Додай посилання на нього в LMS.


1. Slider button overlaps banner text
Steps to reproduce:
1.Open website
2.Go to Home page
3.Pay attention that slider button overlaps banner text


Actual Result:
Slider button overlaps banner text

Expected Result:
Slider button does not overlap banner text

Environment
Production
Brouser Safari, mobile viewe iPhone 12 pro


  



2. 404 appears when go to page “Графік прийому громадян”
Steps to reproduce:
1.Open website
2.Go to Home page
3. Click on burger menu
4. Go to page “Графік прийому громадян”
5. You have been redirected to 404 


Actual Result:
404 appears when go to page “Графік прийому громадян”

Expected Result:
404 should not appear when go to page “Графік прийому громадян”

Environment
Production
Brouser Safari, mobile viewe iPhone 12 pro




3. 404 page wording does not fit container 
Steps to reproduce:
1.Open website
2.Go to Home page
3. Click on burger menu
4. Go to page “Графік прийому громадян”
5. You have been redirected to 404 
6. Pay attention that 404 page wording does not fit container 




Actual Result:
404 page wording does not fit container 


Expected Result:
404 page wording should fit container 


Environment
Production
Brouser Safari, mobile viewe iPhone 12 pro


  









4. Truncated form on the page “Онлайн запис”
Steps to reproduce:
1.Open website
2.Go to Home page
3. Click on burger menu
4. Go to page “Онлайн запис”
5. Scroll down to the form
6. Pay attention that form is truncated


Actual Result:
Truncated form on the page “Онлайн запис”


Expected Result:
The form should not be truncated on the page “Онлайн запис”


Environment
Production
Brouser Safari, mobile viewe iPhone 12 pro
  



5. The description does not fit container on the page “Ветеринарна допомога”
Steps to reproduce:
1.Open website
2.Go to Home page
3. Click on burger menu
4. Go to page “Ветеринарна допомога”
5. Scroll down to the section “Структурні підрозділи”
6. Pay attention that description does not fit container




Actual Result:
The description does not fit container on the page “Ветеринарна допомога”

Expected Result:
The description should fit container on the page “Ветеринарна допомога”


Environment
Production
Brouser Safari, mobile viewe iPhone 12 pro
  









Другий рівень — детальніше заглибся в практику. 
1. Виконай завдання попереднього рівня.
2. Встанови Android Studio за посиланням Download Android Studio and SDK tools. 
3. Запусти Емулятор, використовуючи інструкцію.
4. Знайди 3 баги на сайті “Звірополіс”. Додай їх в документ з баг репортами з попереднього рівня.
*В баг репортах на скриншотах/відео повинно бути зрозуміло, що тестування проводилось саме з емулятора.
1.Phone icon is truncated
Steps to reproduce:
1.Open website
2.Go to Home page
3. Pay attention that Phone icon is truncated


Actual Result:
Phone icon is truncated

Expected Result:
Phone icon should not be truncated


Environment
Production
Brouser Safari, mobile viewe iPhone 13 pro max IOS version 15.0


  



5. After the click on button “Повернутись до питань”, page scrools to the top 
Steps to reproduce:
1.Open website
2.Go to Home page
3. Click on burger menu
4. Go to page “Питання та відповіді”
5. Сhoose the fist item and click the button “Читати далі”
5. Scroll down and click the button “Повернутись до питань”
6. Pay attention that after the click on button “Повернутись до питань”, page scrools to the top


Actual Result:
After the click on button “Повернутись до питань”, page scrools to the top

Expected Result:
After the click on button “Повернутись до питань”, you should be redirected to the page “Питання та відповіді”

Environment
Production
Brouser Safari, mobile viewe iPhone 13 pro max IOS version 15.0


  







3.Wrong description for the photo on the page “Галерея”

Steps to reproduce:
1.Open website
2.Go to Home page
3. Click on burger menu
4. Go to page “Галерея”
5. Сhoose the fist item and click the button “Відкрити альбом”
5. Pay attention that some photos have wrong description - testsetstael


Actual Result:
Wrong description of the photo on the page “Галерея”

Expected Result:
Photos should not have wrong description
Environment
Production
Brouser Safari, mobile viewe iPhone 13 pro max IOS version 15.0[w]


  



[a]тут ми проводимо тестування (безпосередньо взаємодіємо з ПЗ) на цьому етапі. 
Ревью проводимо на етапі верифікації
[b]іноді можна, якщо компанія розробляє декілька проектів
[c]все ок, молодець!
[d]все правильно, молодець!
[e]на справді, якщо проходячи чек-ліст не зрозуміло, що треба робити -- то це погано складений чек-ліст
[f]супер, умнічка!
[g]в останньому expected result можна додати ще "added item is displayed in the shopping card"
[h]все круто, молодець
[i]для останнього expected result можна додати "user received friend request"
[j]можна ще вказати версії, тому що дуже старі версії немає сенсу підтримувати
[k]і також версії
[l]функціональна вимога. Обмежує кількість файлів для функції upload. Нефункціональною може бути: всі фото будуть додані, якщо 100 юзерів намагаються одночасно завантажити по 10 фото
[m]все ок
[n]правильна відповідь б
[o]правильна відповідь
[p]правильна відповідь
[q]все ок
[r]правильна відповідь
[s]тут все ок
[t]все гуд, молодець
[u]все ок
[v]все гуд
[w]все супер